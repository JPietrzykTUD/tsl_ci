
{% set ns_contains_template_parameter = false %}
{% set ns_contains_parameter_pack = false %}
{% set ns_parameter_pack_typenames_str = '' %}
{% set ns_full_qualified_parameters_str = '' %}
{% set ns_parameters_str = '' %}
{% set ns_additional_template_type_name = '' %}
{% set ns_additional_template_params_with_defaults = '' %}
{% set ns_additional_template_name = ''
    %}
{% set rtp_ns_types = '' %}
{% set rtp_ns_params = '' %}
{% set rtp_ns_params_with_defaults = '' %}

{% for param in parameters %}
   {% if not loop.last %}
      {% set comma = ', ' %}
   {% else %}
      {% set comma = '' %}
   {% endif %}
   {% if 'is_parameter_pack' in param and param['is_parameter_pack'] %}
      {% set ns_contains_parameter_pack = true %}
      {% set ns_parameter_pack_typenames_str = ns_parameter_pack_typenames_str ~ 'typename... ' ~ param['ctype'] ~ comma %}
      {% set ns_full_qualified_parameters_str = ns_full_qualified_parameters_str ~ param['ctype'] ~ '... ' ~ param['name'] ~ comma %}
      {% set ns_parameters_str = ns_parameters_str ~ param['name'] ~ '...' ~ comma %}
   {% else %}
      {% if 'default_value' in param and param['default_value'] != "" %}
  		{% set dv = '=' ~ param['default_value'] %}
	  {% else %}
        {% set dv = '' %}
      {% endif %}
      {% if 'declaration_attributes' in param and param['declaration_attributes'] != ""%}
          {% set decl_attribs = param['declaration_attributes'] ~ ' ' %}
      {% else %}
          {% set decl_attribs = '' %}
      {% endif %}
      {% if 'attributes' in param and param['attributes'] != "" %}
	     {% set attribs = ' ' ~ param['attributes'] ~ ' ' %}
      {% else %}
         {% set attribs = ' ' %}
      {% endif %}
      {% set ns_full_qualified_parameters_str = ns_full_qualified_parameters_str ~ decl_attribs ~ param['ctype'] ~ attribs ~ param['name'] ~ dv ~ comma %}
      {% set ns_parameters_str = ns_parameters_str ~ param['name'] ~ comma %}
   {% endif %}
{% endfor %}
{% if ns_contains_parameter_pack %}
{% set ns_parameter_pack_typenames_str = ', ' ~ ns_parameter_pack_typenames_str %}
{% endif %}
{% if additional_simd_template_parameter["name"] != "" %}
{% set ns_additional_template_type_name = 'typename ' ~ additional_simd_template_parameter["name"] ~ ', ' %}
{% set ns_additional_template_params_with_defaults = 'typename ' ~ additional_simd_template_parameter["name"] %}
{% if additional_simd_template_parameter["default_value"] != "" %}
{% set ns_additional_template_params_with_defaults = ns_additional_template_params_with_defaults ~ " = " ~ additional_simd_template_parameter["default_value"] ~ ", "%}
{% else %}
{% set ns_additional_template_params_with_defaults = ns_additional_template_params_with_defaults ~ ", "%}
{% endif %}
{% set ns_additional_template_name =  additional_simd_template_parameter["name"] ~ ', '%}
{% endif %}
{% if additional_non_specialized_template_parameters is not empty %}

{% for parameter_dict in additional_non_specialized_template_parameters %}
{% set loop_comma = (loop.first) ? '' : ', ' %}
{% set rtp_ns_params = rtp_ns_params ~ loop_comma ~ parameter_dict["name"] %}
{% set rtp_ns_types = rtp_ns_types ~ loop_comma ~ parameter_dict["ctype"] ~ ' ' ~ parameter_dict["name"] %}
{% set rtp_ns_params_with_defaults = rtp_ns_params_with_defaults ~ loop_comma ~ parameter_dict["ctype"] ~ ' ' ~ parameter_dict["name"] %}
{% if parameter_dict["default_value"] != "" %}
{% set rtp_ns_params_with_defaults = rtp_ns_params_with_defaults ~ ' = ' ~ parameter_dict["default_value"] %}
{% endif %}
{% endfor %}
{% set ns_additional_template_type_name = ns_additional_template_type_name ~ rtp_ns_types ~ ", "%}
{% set ns_additional_template_params_with_defaults = ns_additional_template_params_with_defaults ~ rtp_ns_params_with_defaults ~ ", "%}
{% set ns_additional_template_name = ns_additional_template_name ~ rtp_ns_params ~ ", "%}
{% endif %}
{# Every implementation is in the (nested) namespace "functors" #}
namespace {{ tsl_implementation_namespace }} {
{# This is the forward declaration of the actual primitive implementation struct #}
    // Definition of a preprocessor variable to detect overload ambiguity.
    #define {{ tsl_namespace|upper ~ '_' ~ tsl_implementation_namespace|upper ~ '_' ~ functor_name|upper ~ '_STRUCT_DEFINED'}}
    // Forward declaration of implementation struct for TSL-primitive "{{ functor_name }}".
    template<VectorProcessingStyle {{ vector_name }}, {{ ns_additional_template_type_name}}ImplementationDegreeOfFreedom {{ idof_name }}>
    struct {{ functor_name }}{};
}

{{ tsl_function_doxygen }}
{# This is the templated free function for the primitive which is called by the user of TSL. #}
template<
    VectorProcessingStyle {{ vector_name }},
    {{ ns_additional_template_params_with_defaults}}ImplementationDegreeOfFreedom {{ idof_name }} = workaround{{ ns_parameter_pack_typenames_str }}
>
{# If the primitive returns something, the caller has to capture the result. #}
{{ (returns['ctype'] != 'void') ? '[[nodiscard]] ' : '' }}{# If force_inline is set to true, we use TSL_FORCE_INLINE. #}{{ (force_inline) ? 'TSL_FORCE_INLINE ' : ' ' }}auto {{ primitive_name }}(
    {{ ns_full_qualified_parameters_str }}
) -> std::enable_if_t<
{% if functor_name == primitive_name %}
  tsl_functor_defined<{{ tsl_implementation_namespace }}::{{ functor_name }}<{{ vector_name }}, {{ ns_additional_template_name }}{{ idof_name }}>>::value,
  {{ returns['ctype'] }}
{% else %}
#ifdef {{ tsl_namespace|upper ~ '_' ~ tsl_implementation_namespace|upper ~ '_' ~ primitive_name|upper ~ '_STRUCT_DEFINED'}}
  !tsl_primitive_ambiguous<{{ tsl_implementation_namespace }}::{{ primitive_name }}<{{ vector_name }}, {{ ns_additional_template_name }}{{ idof_name }}>, {{ tsl_implementation_namespace }}::{{ functor_name }}<{{ vector_name }}, {{ ns_additional_template_name }}{{ idof_name }}>>(),
#else
  true,
#endif
  {{ returns['ctype'] }}
{% endif %}
>{
    {# If the function primitive implementation returns something we have to return it, otherwise we just call it. #}
    {# Call the actual implementation with all parameters. #}
    {{ (returns['ctype'] != 'void') ? 'return ' : '' }}{{ tsl_implementation_namespace }}::{{ functor_name }}<{{ vector_name }}, {{ ns_additional_template_name }}{{ idof_name }}>::apply(
        {{ ns_parameters_str }}
    );
}
