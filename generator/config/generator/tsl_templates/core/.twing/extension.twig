
{% set ns_default_vector_size = 0 %}

{% if simdT_default_size_in_bits == 0 %}
   {% set ns_default_vector_size = "sizeof(BaseType)*8" %}
{% else %}
   {% set ns_default_vector_size = simdT_default_size_in_bits %}
{% endif %}
struct {{ extension_name }} {
{% for custom_type in custom_types %}
      template<TSLArithmetic BaseType, std::size_t VectorSizeInBits = {{ ns_default_vector_size }}>
         struct {{ custom_type['name'] }} {
            {{ custom_type['struct_code'] }}
         };
{% endfor %}
      template<TSLArithmetic BaseType, std::size_t VectorSizeInBits = {{ ns_default_vector_size }}>
         struct types {
            using default_size_in_bits = std::integral_constant<std::size_t, VectorSizeInBits>;
            using register_t {{ simdT_register_type_attributes }} = {{ simdT_register_type_compiler_attributes }}
               {{ simdT_register_type }};
            using mask_t {{ simdT_mask_type_attributes }} = {{ simdT_mask_type_compiler_attributes }}
               {{ simdT_mask_type }};
            using imask_t =
               {{ simdT_integral_mask_type }};
         };
   };