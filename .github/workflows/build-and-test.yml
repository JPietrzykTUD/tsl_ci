name: Generation for Intel / ARM
run-name: Generate the Template SIMD Library

# on:
#   workflow_run:
#     workflows: [create-build-and-test-images]
#     types:
#       - completed
on: 
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, edited]

jobs:
  setup-generation:
    name: Setup Environment for Generation
    uses: ./.github/workflows/setup-environment.yml    
    with:
      requirement-file: "requirements.txt"
      docker-tag: "${{ vars.GENERATION_TAG }}"
      context: ".github/actions/tsl-generate"
    secrets:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_PASSWORD }}
  setup-x86:
    name: Setup Environment for x86
    uses: ./.github/workflows/setup-environment.yml    
    with:
      requirement-file: "requirements.txt"
      docker-tag: "${{ vars.BUILD_TEST_x86_TAG }}"
      context: ".github/actions/tsl-test-x86"
    secrets:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_PASSWORD }}
  setup-arm:
    name: Setup Environment for ARM
    uses: ./.github/workflows/setup-environment.yml    
    with:
      requirement-file: "requirements.txt"
      docker-tag: "${{ vars.BUILD_TEST_ARM_TAG }}"
      context: ".github/actions/tsl-test-arm"
      platforms: linux/amd64,linux/arm64
    secrets:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_PASSWORD }}


  generate-for-x86:
    runs-on: ubuntu-latest
    needs: setup-generation
    name: Generate TSL for Intel x86
    strategy:
      matrix:
        target_flags:
          - "sse"
          - "sse,sse2"
          - "sse,sse2,ssse3"
          - "sse,sse2,ssse3,sse4_1"
          - "sse,sse2,ssse3,sse4_1,sse4_2"
          - "sse,sse2,ssse3,sse4_1,sse4_2,avx"
          - "sse,sse2,ssse3,sse4_1,sse4_2,avx,avx2"
          - "sse,sse2,ssse3,sse4_1,sse4_2,avx,avx2,avx512f"
          - "sse,sse2,ssse3,sse4_1,sse4_2,avx,avx2,avx512f,avx512cd,avx512er,avx512pf" #avx3.1
          - "sse,sse2,ssse3,sse4_1,sse4_2,avx,avx2,avx512f,avx512cd,avx512bw,avx512dq,avx512vl" #avx3.2
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Checkout PR and merge
        uses: check-spelling/checkout-merge@v0.0.4
      - name: TSL Generate
        id: generate
        uses: ./.github/actions/tsl-generate
        with:
          # image: ${{ vars.GENERATION_TAG }}
          targets: ${{ matrix.target_flags }}

      - name: Cache TSL
        uses: actions/cache/save@v4
        if: always()
        with:
          path: 
            ${{ github.workspace }}/${{ steps.generate.outputs.out }}
          key: generation_${{ runner.os }}-tsl-x86-${{ github.head_ref }}.${{ github.sha }}-${{ steps.generate.outputs.name }}
      # - name: Upload Generated TSL
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: generate_tsl_intel_${{ steps.generate.outputs.name }}
      #     path: ${{ github.workspace }}/${{ steps.generate.outputs.out }}
      #     overwrite: true
      #     retention-days: 1
      - if: ${{ steps.generate.outputs.success == 'false' }}
        run: |
          echo "Generation for Intel x86 failed"
          echo "${{ steps.generate.outputs.msg }}"
          exit 1
  # package-for-x86:
  #   runs-on: ubuntu-latest
  #   name: Package TSL for Intel x86
  #   needs: generate-for-x86
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Checkout PR and merge
  #       uses: check-spelling/checkout-merge@v0.0.4
  #     - name: Download Generated TSL
  #       uses: actions/download-artifact@v4
  #       with:
  #         pattern: generate_tsl_intel_*
  #         path: ${{ github.workspace }}/tsl_intel
  #     - name: Upload Packaged TSL
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: TSL_INTEL
  #         path: ${{ github.workspace }}/tsl_intel
  #         overwrite: true
  #         retention-days: 1
  build-and-test-for-x86:
    runs-on: ubuntu-latest
    # needs: [package-for-x86, setup-x86]
    needs: [setup-x86, generate-for-x86]
    name: Build and test TSL for Intel x86
    strategy:
      matrix:
        compilers: ["clang++-17", "g++"]
        tsl_folders:
          - "sse"
          - "sse_sse2"
          - "sse_sse2_ssse3"
          - "sse_sse2_ssse3_sse4_1"
          - "sse_sse2_ssse3_sse4_1_sse4_2"
          - "sse_sse2_ssse3_sse4_1_sse4_2_avx"
          - "sse_sse2_ssse3_sse4_1_sse4_2_avx_avx2"
          - "sse_sse2_ssse3_sse4_1_sse4_2_avx_avx2_avx512f"
          - "sse_sse2_ssse3_sse4_1_sse4_2_avx_avx2_avx512f_avx512cd_avx512er_avx512pf" #avx3.1
          - "sse_sse2_ssse3_sse4_1_sse4_2_avx_avx2_avx512f_avx512cd_avx512bw_avx512dq_avx512vl" #avx3.2
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Checkout PR and merge
        uses: check-spelling/checkout-merge@v0.0.4

      - name: Cache TSL
        uses: actions/cache/restore@v4
        with:
          path: 
            ${{ github.workspace }}/tsl/intel
          key: generation_${{ runner.os }}-tsl-x86-${{ github.head_ref }}.${{ github.sha }}-${{ matrix.tsl_folders }}
          fail-on-cache-miss: true

      # - name: Download Generated TSL
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: generate_${{ matrix.tsl_folders }}
      #     path: ${{ github.workspace }}/tsl/intel
      - name: TSL Build and Test
        id: bat
        uses: ./.github/actions/tsl-test-x86
        with:
          # image: ${{ vars.BUILD_TEST_X86_TAG }}
          compiler: ${{ matrix.compilers }}
          tsl: tsl/intel/${{ matrix.tsl_folders }}
      - name: Cache TSL
        uses: actions/cache/save@v4
        if: always()
        with:
          path: 
            ${{ github.workspace }}/${{ steps.bat.outputs.out }}
          key: build_${{ runner.os }}-tsl-x86-${{ github.head_ref }}.${{ github.sha }}-${{ matrix.compilers }}-${{ matrix.tsl_folders }}
      # - name: Upload Generated TSL
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: build_${{ matrix.tsl_folders }}_${{ matrix.compilers }}
      #     path: ${{ github.workspace }}/${{ steps.bat.outputs.out }}
      #     overwrite: true
      #     retention-days: 1
      - if: ${{ steps.bat.outputs.success == 'false' }}
        name: Upload on Error
        uses: actions/upload-artifact@v4
        with:
          name: build_${{ matrix.tsl_folders }}_${{ matrix.compilers }}
          path: ${{ github.workspace }}/${{ steps.bat.outputs.out }}
          overwrite: true
          retention-days: 1
      - if: ${{ steps.bat.outputs.success == 'false' }}
        run: |
          echo "Build (with ${{ matrix.compilers }}, ${{ matrix.tsl_folders }}) and testing for Intel x86 failed"
          echo "${{ steps.bat.outputs.msg }}"
          exit 1
  package-results-x86:
    runs-on: ubuntu-latest
    name: Package results of build & test of TSL for Intel x86
    needs: build-and-test-for-x86
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Checkout PR and merge
        uses: check-spelling/checkout-merge@v0.0.4
      - name: Cache TSL
        uses: actions/cache/restore@v4
        with:
          key: build_${{ runner.os }}-tsl-x86-${{ github.head_ref }}.${{ github.sha }}
          path: 
            ${{ github.workspace }}/pipeline-summary-x86
          restore-keys: 
            build_${{ runner.os }}-tsl-x86-${{ github.head_ref }}.${{ github.sha }}
      # - name: Download Generated TSL
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: build_*
      #     path: ${{ github.workspace }}/tsl/intel
      - name: Upload Packaged TSL
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-summary-x86
          path: ${{ github.workspace }}/pipeline-summary-x86
          overwrite: true
          retention-days: 1

  generate-for-arm:
    runs-on: ubuntu-latest
    needs: setup-generation
    name: Generate TSL for ARM
    strategy:
      matrix:
        target_flags:
          - "neon"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Checkout PR and merge
        uses: check-spelling/checkout-merge@v0.0.4
      - name: TSL Generate
        id: generate
        uses: ./.github/actions/tsl-generate
        with:
          # image: ${{ vars.GENERATION_TAG }}
          targets: ${{ matrix.target_flags }}
      - name: Upload Generated TSL
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: generate_tsl_arm_${{ steps.generate.outputs.name }}
          path: ${{ github.workspace }}/${{ steps.generate.outputs.out }}
          overwrite: true
          retention-days: 1
      - if: ${{ steps.generate.outputs.success == 'false' }}
        run: |
          echo "Generation for ARM failed"
          echo "${{ steps.generate.outputs.msg }}"
          exit 1
  package-for-arm:
    runs-on: ubuntu-latest
    name: Package TSL for ARM
    needs: generate-for-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Checkout PR and merge
        uses: check-spelling/checkout-merge@v0.0.4
      - name: Download Generated TSL
        uses: actions/download-artifact@v4
        with:
          pattern: generate_tsl_arm_*
          path: ${{ github.workspace }}/tsl_arm
      - name: Upload Packaged TSL
        uses: actions/upload-artifact@v4
        with:
          name: TSL_ARM
          path: ${{ github.workspace }}/tsl_arm
          overwrite: true
          retention-days: 1
  build-and-test-for-arm:
    runs-on: ubuntu-latest
    needs: [package-for-arm, setup-arm]
    name: Build and test TSL for ARM
    strategy:
      matrix:
        compilers: ["g++"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Checkout PR and merge
        uses: check-spelling/checkout-merge@v0.0.4
      - name: Download Generated TSL
        uses: actions/download-artifact@v4
        with:
          name: TSL_ARM
          path: ${{ github.workspace }}/tsl/arm
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: TSL Build and Test
        id: bat
        uses: ./.github/actions/tsl-test-arm
        with:
          # image: ${{ vars.BUILD_TEST_ARM_TAG }}
          compiler: ${{ matrix.compilers }}
          tsl: tsl/arm
      - name: Upload Generated TSL
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build_tsl_arm_${{ matrix.compilers }}
          path: ${{ github.workspace }}/${{ steps.bat.outputs.out }}
          overwrite: true
          retention-days: 1
      - if: ${{ steps.bat.outputs.success == 'false' }}
        run: |
          echo "Build and testing for ARM failed"
          echo "${{ steps.bat.outputs.msg }}"
          exit 1