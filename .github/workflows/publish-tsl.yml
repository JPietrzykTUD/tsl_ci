name: Publish TSL

on:
  push:
    branches:
      - main
      

jobs:
  setup-generation:
    uses: ./.github/workflows/setup-environment.yml    
    with:
      requirement-file: "requirements.txt"
      docker-tag: "${{ vars.GENERATION_TAG }}"
      context: ".github/actions/tsl-generate"
      ref: ${{ github.ref}}
    secrets:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_PASSWORD }}
  
  generate:
    runs-on: ubuntu-latest
    name: Job to generate hollistic TSL
    needs: setup-generation
    strategy:
      matrix:
        target_flags:
          - "sse"
          - "sse,sse2"
          - "sse,sse2,ssse3"
          - "sse,sse2,ssse3,sse4_1"
          - "sse,sse2,ssse3,sse4_1,sse4_2"
          - "sse,sse2,ssse3,sse4_1,sse4_2,avx"
          - "sse,sse2,ssse3,sse4_1,sse4_2,avx,avx2"
          - "sse,sse2,ssse3,sse4_1,sse4_2,avx,avx2,avx512f"
          - "sse,sse2,ssse3,sse4_1,sse4_2,avx,avx2,avx512f,avx512cd,avx512er,avx512pf" #avx3.1
          - "sse,sse2,ssse3,sse4_1,sse4_2,avx,avx2,avx512f,avx512cd,avx512bw,avx512dq,avx512vl" #avx3.2
          - "neon"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: TSL Generate
        id: generate
        uses: ./.github/actions/tsl-generate
        with:
          image: ${{ vars.GENERATION_TAG }}
          targets: ${{ matrix.target_flags }}
      - name: TSL Generate Output
        if: always()
        run: echo "TSL Generation ${{ steps.generate.outputs.msg }}"
      - if: ${{ steps.generate.outputs.success == 'false' }}
        run: "echo SUCCESS == false"
      - if: ${{ steps.generate.outputs.success == 'true' }}
        run: "echo SUCCESS == true"
      - name: Upload Generated TSL
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: generate_tsl_${{ steps.generate.outputs.name }}
          path: ${{ github.workspace }}/${{ steps.generate.outputs.out }}
          overwrite: true
          retention-days: 1
      - if: ${{ steps.generate.outputs.success == 'false' }}
        run: |
          echo "Generation failed"
          echo "${{ steps.generate.outputs.msg }}"
          exit 1
  package:
    runs-on: ubuntu-latest
    name: Job to package TSL
    needs: generate
    permissions: write-all
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # - name: Rebase
      #   run: |
      #     git config --global user.email "johannes.pietrzyk@tu-dresden.de"
      #     git config --global user.name "GitHub Action (Maintainer: Johannes Pietrzyk)"
      #     git fetch
      #     git checkout releases
      #     git rebase main
      #     echo "rebased"
      #     git push origin releases --force
      - name: Auto-Tag
        run: |
          set -x
          echo "blubb"
          echo "Auto-Tagging"
          HAS_LATEST=$((git ls-remote --exit-code origin refs/tags/latest >>/dev/null 2>&1) && echo 0 || echo 1)
          if [ ${HAS_LATEST} -eq 0 ]; then
            git push origin --delete refs/tags/latest
          else
            echo "No tag to delete"
          fi
          git fetch
          LATEST_TAG=$(git tag --sort=version:refname | head -n 1)
          if [ -z "${LATEST_TAG}" ]; then
            echo "No tag: $LATEST_TAG"
            LATEST_TAG=v0.0.0
          else
            echo "Latest tag: $LATEST_TAG"
          fi
          LATEST_TAG=${LATEST_TAG:1}
          echo "latest=${LATEST_TAG}"
          MAJOR=${LATEST_TAG%%.*}
          echo "major=${MAJOR}"
          TEMP=${LATEST_TAG#*.}
          echo "temp=${TEMP}"
          MINOR=${TEMP%%.*}
          echo "minor=${MINOR}"
          PATCH=${TEMP#*.}
          echo "patch=${PATCH}"
          PATCH=$((PATCH+1))
          VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "tag=${VERSION}"
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          git tag -a $VERSION -m "${VERSION} (Auto-tagged by GitHub Actions)"
          git tag -a latest -m "Auto-tagged by GitHub Actions"
          git push origin --tags
      - name: Download Generated TSL
        uses: actions/download-artifact@v4
        with:
          pattern: generate_tsl_*
          path: ${{ github.workspace }}/tsl
      - name: Package TSL
        run: |
          tar -czf tsl.tar.gz tsl
          echo "TSL Package created"
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            tsl.tar.gz